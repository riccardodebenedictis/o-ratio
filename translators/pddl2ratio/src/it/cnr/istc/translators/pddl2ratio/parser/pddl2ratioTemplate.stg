PDDL(domain, problem) ::= <<
<Domain(domain)>

<Problem(problem)>
>>



Domain(domain) ::= <<
/**
* Domain: <domain.name>
*/
<domain.types.values : {type |
<if(!(type.superclass))>

<TopType(type)>
<else>

<SubType(type)>
<endif>}>
class <domain.name>State : PropositionalState {

    <domain.name>Agent agent;
    <domain.constants.values : {constant |<constant.type.name> <constant.name>;}; separator="\n">

    <domain.name>State(<domain.name>Agent agent<if(domain.constants.values)>, <domain.constants.values : {constant |<constant.type.name> <constant.name>}; separator=", "><endif>) : agent(agent)<if(domain.constants.values)>, <domain.constants.values : {constant |<constant.name>[<constant.name>]}; separator=", "><endif> {\}
<domain.predicates.values : {predicate |


    predicate <predicate.name>(<predicate.variables : {variable |<variable.type.name> <variable.name>}; separator=", ">) {
        duration >= 1;
        <predicate>
    \}}>
<domain.functions.values : {function |


    predicate <function.name>(<function.variables : {variable |<variable.type.name> <variable.name>}; separator=", "><if(function.variables)>, <endif><function.type.name> value) {
        duration >= 1;
        <function>
    \}}>
\}

class <domain.name>Agent : PropositionalAgent {

    <domain.name>State propositional_state;
    <domain.constants.values : {constant |<constant.type.name> <constant.name>;}; separator="\n">

    <domain.name>Agent(<domain.constants.values : {constant |<constant.type.name> <constant.name>}; separator=", ">) : propositional_state(new <domain.name>State(this<if(domain.constants.values)>, <domain.constants.values : {constant |<constant.name>}; separator=", "><endif>))<if(domain.constants.values)>, <domain.constants.values : {constant |<constant.name>[<constant.name>]}; separator=", "><endif> {\}
<domain.actions.values : {action |


    predicate <action.name>(<action.variables : {variable |<variable.type.name> <variable.name>}; separator=", ">) : ImpulsivePredicate {
        <action>    \}}>
<domain.durativeActions.values : {action |


    predicate <action.name>(<action.variables : {variable |<variable.type.name> <variable.name>}; separator=", ">) : IntervalPredicate {
        <action>    \}}>
\}
>>



Problem(problem) ::= <<
/**
* Domain: <problem.domain.name>
* Problem: <problem.name>
*/

<[problem.domain.constants.values, problem.objects.values] : {object |<object.type.name> <object.name> = new <object.type.name>(<i>);
}>
<problem.domain.name>Agent agent = new <problem.domain.name>Agent(<problem.domain.constants.values : {constant | <constant.name>}; separator=", ">);

<problem.initEls : {init |<init; format="init">
}>
<problem.goal; format="goal">
>>



TopType(type) ::= <<
class <type.name> {

    real id;

    <type.name>(real id) : id(id) {\}
\}
>>



SubType(type) ::= <<
class <type.name> : <type.superclass.name> {

    <type.name>(real id) : <type.superclass.name>(id) {\}
\}
>>

